// Generated by gencpp from file ros_face_recognition/FaceResponse.msg
// DO NOT EDIT!


#ifndef ROS_FACE_RECOGNITION_MESSAGE_FACERESPONSE_H
#define ROS_FACE_RECOGNITION_MESSAGE_FACERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_face_recognition/Box.h>

namespace ros_face_recognition
{
template <class ContainerAllocator>
struct FaceResponse_
{
  typedef FaceResponse_<ContainerAllocator> Type;

  FaceResponse_()
    : faces()  {
    }
  FaceResponse_(const ContainerAllocator& _alloc)
    : faces(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_face_recognition::Box_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_face_recognition::Box_<ContainerAllocator> >::other >  _faces_type;
  _faces_type faces;





  typedef boost::shared_ptr< ::ros_face_recognition::FaceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_face_recognition::FaceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FaceResponse_

typedef ::ros_face_recognition::FaceResponse_<std::allocator<void> > FaceResponse;

typedef boost::shared_ptr< ::ros_face_recognition::FaceResponse > FaceResponsePtr;
typedef boost::shared_ptr< ::ros_face_recognition::FaceResponse const> FaceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_face_recognition::FaceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_face_recognition

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_face_recognition': ['/home/sz/omniWheelCareRobot/rosCode/src/ros-face-recognition/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_face_recognition::FaceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_face_recognition::FaceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_face_recognition::FaceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "256cd47e72fed629e24eadd8e05da58a";
  }

  static const char* value(const ::ros_face_recognition::FaceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x256cd47e72fed629ULL;
  static const uint64_t static_value2 = 0xe24eadd8e05da58aULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_face_recognition/FaceResponse";
  }

  static const char* value(const ::ros_face_recognition::FaceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Box[] faces\n\
\n\
================================================================================\n\
MSG: ros_face_recognition/Box\n\
float32 x\n\
float32 y\n\
float32 w\n\
float32 h\n\
string name\n\
string label\n\
string gender\n\
";
  }

  static const char* value(const ::ros_face_recognition::FaceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.faces);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_face_recognition::FaceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_face_recognition::FaceResponse_<ContainerAllocator>& v)
  {
    s << indent << "faces[]" << std::endl;
    for (size_t i = 0; i < v.faces.size(); ++i)
    {
      s << indent << "  faces[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_face_recognition::Box_<ContainerAllocator> >::stream(s, indent + "    ", v.faces[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_FACE_RECOGNITION_MESSAGE_FACERESPONSE_H
