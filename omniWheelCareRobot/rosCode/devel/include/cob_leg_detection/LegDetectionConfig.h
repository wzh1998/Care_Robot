//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the cob_leg_detection package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __cob_leg_detection__LEGDETECTIONCONFIG_H__
#define __cob_leg_detection__LEGDETECTIONCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace cob_leg_detection
{
  class LegDetectionConfigStatics;

  class LegDetectionConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(LegDetectionConfig &config, const LegDetectionConfig &max, const LegDetectionConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const LegDetectionConfig &config1, const LegDetectionConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, LegDetectionConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const LegDetectionConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LegDetectionConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const LegDetectionConfig &config) const = 0;
      virtual void getValue(const LegDetectionConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T LegDetectionConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (LegDetectionConfig::* field);

      virtual void clamp(LegDetectionConfig &config, const LegDetectionConfig &max, const LegDetectionConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const LegDetectionConfig &config1, const LegDetectionConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, LegDetectionConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const LegDetectionConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, LegDetectionConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const LegDetectionConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const LegDetectionConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, LegDetectionConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    template<class T, class PT>
    class GroupDescription : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, LegDetectionConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<LegDetectionConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(LegDetectionConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("connection_threshold"==(*_i)->name){connection_threshold = boost::any_cast<double>(val);}
        if("min_points_per_group"==(*_i)->name){min_points_per_group = boost::any_cast<int>(val);}
        if("leg_reliability_limit"==(*_i)->name){leg_reliability_limit = boost::any_cast<double>(val);}
        if("publish_legs"==(*_i)->name){publish_legs = boost::any_cast<bool>(val);}
        if("publish_people"==(*_i)->name){publish_people = boost::any_cast<bool>(val);}
        if("publish_leg_markers"==(*_i)->name){publish_leg_markers = boost::any_cast<bool>(val);}
        if("publish_vel_markers"==(*_i)->name){publish_vel_markers = boost::any_cast<bool>(val);}
        if("publish_people_markers"==(*_i)->name){publish_people_markers = boost::any_cast<bool>(val);}
        if("no_observation_timeout"==(*_i)->name){no_observation_timeout = boost::any_cast<double>(val);}
        if("max_second_leg_age"==(*_i)->name){max_second_leg_age = boost::any_cast<double>(val);}
        if("max_track_jump"==(*_i)->name){max_track_jump = boost::any_cast<double>(val);}
        if("max_meas_jump"==(*_i)->name){max_meas_jump = boost::any_cast<double>(val);}
        if("leg_pair_separation"==(*_i)->name){leg_pair_separation = boost::any_cast<double>(val);}
        if("cov_meas_legs"==(*_i)->name){cov_meas_legs = boost::any_cast<double>(val);}
        if("cov_meas_people"==(*_i)->name){cov_meas_people = boost::any_cast<double>(val);}
        if("fixed_frame"==(*_i)->name){fixed_frame = boost::any_cast<std::string>(val);}
        if("kalman_p"==(*_i)->name){kalman_p = boost::any_cast<double>(val);}
        if("kalman_q"==(*_i)->name){kalman_q = boost::any_cast<double>(val);}
        if("kalman_r"==(*_i)->name){kalman_r = boost::any_cast<double>(val);}
        if("kalman_on"==(*_i)->name){kalman_on = boost::any_cast<int>(val);}
      }
    }

    double connection_threshold;
int min_points_per_group;
double leg_reliability_limit;
bool publish_legs;
bool publish_people;
bool publish_leg_markers;
bool publish_vel_markers;
bool publish_people_markers;
double no_observation_timeout;
double max_second_leg_age;
double max_track_jump;
double max_meas_jump;
double leg_pair_separation;
double cov_meas_legs;
double cov_meas_people;
std::string fixed_frame;
double kalman_p;
double kalman_q;
double kalman_r;
int kalman_on;

    bool state;
    std::string name;

    
}groups;



//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double connection_threshold;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_points_per_group;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double leg_reliability_limit;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_legs;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_people;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_leg_markers;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_vel_markers;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool publish_people_markers;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double no_observation_timeout;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_second_leg_age;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_track_jump;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double max_meas_jump;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double leg_pair_separation;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cov_meas_legs;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double cov_meas_people;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string fixed_frame;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kalman_p;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kalman_q;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double kalman_r;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int kalman_on;
//#line 218 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("LegDetectionConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const LegDetectionConfig &__max__ = __getMax__();
      const LegDetectionConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const LegDetectionConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const LegDetectionConfig &__getDefault__();
    static const LegDetectionConfig &__getMax__();
    static const LegDetectionConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const LegDetectionConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void LegDetectionConfig::ParamDescription<std::string>::clamp(LegDetectionConfig &config, const LegDetectionConfig &max, const LegDetectionConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class LegDetectionConfigStatics
  {
    friend class LegDetectionConfig;

    LegDetectionConfigStatics()
    {
LegDetectionConfig::GroupDescription<LegDetectionConfig::DEFAULT, LegDetectionConfig> Default("Default", "", 0, 0, true, &LegDetectionConfig::groups);
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.connection_threshold = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.connection_threshold = 0.25;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.connection_threshold = 0.06;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("connection_threshold", "double", 0, "[m]", "", &LegDetectionConfig::connection_threshold)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("connection_threshold", "double", 0, "[m]", "", &LegDetectionConfig::connection_threshold)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_points_per_group = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_points_per_group = 20;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_points_per_group = 5;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<int>("min_points_per_group", "int", 0, "", "", &LegDetectionConfig::min_points_per_group)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<int>("min_points_per_group", "int", 0, "", "", &LegDetectionConfig::min_points_per_group)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.leg_reliability_limit = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.leg_reliability_limit = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.leg_reliability_limit = 0.5;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("leg_reliability_limit", "double", 0, "", "", &LegDetectionConfig::leg_reliability_limit)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("leg_reliability_limit", "double", 0, "", "", &LegDetectionConfig::leg_reliability_limit)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_legs = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_legs = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_legs = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_legs", "bool", 0, "", "", &LegDetectionConfig::publish_legs)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_legs", "bool", 0, "", "", &LegDetectionConfig::publish_legs)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_people = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_people = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_people = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_people", "bool", 0, "", "", &LegDetectionConfig::publish_people)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_people", "bool", 0, "", "", &LegDetectionConfig::publish_people)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_leg_markers = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_leg_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_leg_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_leg_markers", "bool", 0, "", "", &LegDetectionConfig::publish_leg_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_leg_markers", "bool", 0, "", "", &LegDetectionConfig::publish_leg_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_vel_markers = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_vel_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_vel_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_vel_markers", "bool", 0, "", "", &LegDetectionConfig::publish_vel_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_vel_markers", "bool", 0, "", "", &LegDetectionConfig::publish_vel_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.publish_people_markers = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.publish_people_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.publish_people_markers = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_people_markers", "bool", 0, "", "", &LegDetectionConfig::publish_people_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<bool>("publish_people_markers", "bool", 0, "", "", &LegDetectionConfig::publish_people_markers)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.no_observation_timeout = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.no_observation_timeout = 5.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.no_observation_timeout = 0.5;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("no_observation_timeout", "double", 0, "Timeout tolerance for no observations [s]", "", &LegDetectionConfig::no_observation_timeout)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("no_observation_timeout", "double", 0, "Timeout tolerance for no observations [s]", "", &LegDetectionConfig::no_observation_timeout)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_second_leg_age = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_second_leg_age = 2.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_second_leg_age = 2.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_second_leg_age", "double", 0, "[s]", "", &LegDetectionConfig::max_second_leg_age)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_second_leg_age", "double", 0, "[s]", "", &LegDetectionConfig::max_second_leg_age)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_track_jump = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_track_jump = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_track_jump = 1.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_track_jump", "double", 0, "[m]", "", &LegDetectionConfig::max_track_jump)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_track_jump", "double", 0, "[m]", "", &LegDetectionConfig::max_track_jump)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_meas_jump = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_meas_jump = 2.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_meas_jump = 0.75;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_meas_jump", "double", 0, "[m]", "", &LegDetectionConfig::max_meas_jump)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("max_meas_jump", "double", 0, "[m]", "", &LegDetectionConfig::max_meas_jump)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.leg_pair_separation = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.leg_pair_separation = 0.8;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.leg_pair_separation = 0.2;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("leg_pair_separation", "double", 0, "[m]", "", &LegDetectionConfig::leg_pair_separation)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("leg_pair_separation", "double", 0, "[m]", "", &LegDetectionConfig::leg_pair_separation)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cov_meas_legs = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cov_meas_legs = 0.0025;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cov_meas_legs = 0.0025;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("cov_meas_legs", "double", 0, "[m]", "", &LegDetectionConfig::cov_meas_legs)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("cov_meas_legs", "double", 0, "[m]", "", &LegDetectionConfig::cov_meas_legs)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.cov_meas_people = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.cov_meas_people = 0.0025;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.cov_meas_people = 0.0025;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("cov_meas_people", "double", 0, "[m]", "", &LegDetectionConfig::cov_meas_people)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("cov_meas_people", "double", 0, "[m]", "", &LegDetectionConfig::cov_meas_people)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.fixed_frame = "";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.fixed_frame = "";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.fixed_frame = "base_link";
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<std::string>("fixed_frame", "str", 0, "Fixed Frame", "", &LegDetectionConfig::fixed_frame)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<std::string>("fixed_frame", "str", 0, "Fixed Frame", "", &LegDetectionConfig::fixed_frame)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kalman_p = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kalman_p = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kalman_p = 4.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_p", "double", 0, "", "", &LegDetectionConfig::kalman_p)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_p", "double", 0, "", "", &LegDetectionConfig::kalman_p)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kalman_q = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kalman_q = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kalman_q = 0.002;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_q", "double", 0, "", "", &LegDetectionConfig::kalman_q)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_q", "double", 0, "", "", &LegDetectionConfig::kalman_q)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kalman_r = 0.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kalman_r = 20.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kalman_r = 10.0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_r", "double", 0, "", "", &LegDetectionConfig::kalman_r)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<double>("kalman_r", "double", 0, "", "", &LegDetectionConfig::kalman_r)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.kalman_on = 0;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.kalman_on = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.kalman_on = 1;
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<int>("kalman_on", "int", 0, "", "", &LegDetectionConfig::kalman_on)));
//#line 292 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(LegDetectionConfig::AbstractParamDescriptionConstPtr(new LegDetectionConfig::ParamDescription<int>("kalman_on", "int", 0, "", "", &LegDetectionConfig::kalman_on)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(LegDetectionConfig::AbstractGroupDescriptionConstPtr(new LegDetectionConfig::GroupDescription<LegDetectionConfig::DEFAULT, LegDetectionConfig>(Default)));
//#line 356 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<LegDetectionConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<LegDetectionConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<LegDetectionConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    LegDetectionConfig __max__;
    LegDetectionConfig __min__;
    LegDetectionConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const LegDetectionConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static LegDetectionConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &LegDetectionConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const LegDetectionConfig &LegDetectionConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const LegDetectionConfig &LegDetectionConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const LegDetectionConfig &LegDetectionConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<LegDetectionConfig::AbstractParamDescriptionConstPtr> &LegDetectionConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<LegDetectionConfig::AbstractGroupDescriptionConstPtr> &LegDetectionConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const LegDetectionConfigStatics *LegDetectionConfig::__get_statics__()
  {
    const static LegDetectionConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = LegDetectionConfigStatics::get_instance();

    return statics;
  }


}

#endif // __LEGDETECTIONRECONFIGURATOR_H__
